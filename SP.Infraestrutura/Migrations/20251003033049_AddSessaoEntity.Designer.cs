// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SP.Infraestrutura.Data.Context;

#nullable disable

namespace SP.Infraestrutura.Migrations
{
    [DbContext(typeof(SPContext))]
    [Migration("20251003033049_AddSessaoEntity")]
    partial class AddSessaoEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SP.Dominio.Clientes.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AceiteLgpd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Bairro")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CEP")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("character(14)")
                        .IsFixedLength();

                    b.Property<string>("Cidade")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContatoEmergencia")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataUltimaAtualizacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DiaVencimento")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Endereco")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Estado")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character(2)")
                        .IsFixedLength();

                    b.Property<string>("FormaPagamentoPreferida")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Numero")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Profissao")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StatusFinanceiro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TelefoneEmergencia")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("ValorSessao")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("ix_clientes_ativo");

                    b.HasIndex("CPF")
                        .IsUnique()
                        .HasDatabaseName("ix_clientes_cpf");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_clientes_email");

                    b.HasIndex("StatusFinanceiro")
                        .HasDatabaseName("ix_clientes_status_financeiro");

                    b.HasIndex("Nome", "Ativo")
                        .HasDatabaseName("ix_clientes_nome_ativo");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("SP.Dominio.Sessoes.Sessao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnotacoesClinicas")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<bool>("ConsiderarFaturamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DataHoraAgendada")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataHoraRealizada")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataUltimaAtualizacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DuracaoMinutos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(50);

                    b.Property<int?>("DuracaoRealMinutos")
                        .HasColumnType("integer");

                    b.Property<string>("FormaPagamento")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MotivoCancelamento")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("Pago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Periodicidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3);

                    b.Property<int?>("SessaoOriginalId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<decimal>("Valor")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("ix_sessoes_ativo");

                    b.HasIndex("ClienteId")
                        .HasDatabaseName("ix_sessoes_cliente_id");

                    b.HasIndex("DataHoraAgendada")
                        .HasDatabaseName("ix_sessoes_data_hora_agendada");

                    b.HasIndex("Pago")
                        .HasDatabaseName("ix_sessoes_pago");

                    b.HasIndex("SessaoOriginalId");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_sessoes_status");

                    b.HasIndex("ClienteId", "DataHoraAgendada")
                        .IsUnique()
                        .HasDatabaseName("ix_sessoes_cliente_data");

                    b.ToTable("Sessoes", (string)null);
                });

            modelBuilder.Entity("SP.Dominio.Sessoes.Sessao", b =>
                {
                    b.HasOne("SP.Dominio.Clientes.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SP.Dominio.Sessoes.Sessao", "SessaoOriginal")
                        .WithMany("SessoesReagendadas")
                        .HasForeignKey("SessaoOriginalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cliente");

                    b.Navigation("SessaoOriginal");
                });

            modelBuilder.Entity("SP.Dominio.Sessoes.Sessao", b =>
                {
                    b.Navigation("SessoesReagendadas");
                });
#pragma warning restore 612, 618
        }
    }
}
